FunÃ§Ã£o (char)	                    Equivalente (wchar_t)	            DescriÃ§Ã£o

strlen(str)	                        wcslen(str)	                        Tamanho da string
strcpy(dest, src)	                wcscpy(dest, src)	                CÃ³pia de string
strcmp(s1, s2)	                    wcscmp(s1, s2)	                    ComparaÃ§Ã£o de strings
printf("%s", str)	                wprintf(L"%ls", str)	            ImpressÃ£o de string
scanf("%s", str)	                wscanf(L"%ls", str)	                Entrada de string
getchar()                           getwchar()                          Entrada de caractere
strcspn(* str, * str)               wcschr(* str, * str)                Primeira ocorrÃªncia de qualquer caractere 
strrchr(str, ch)                    wcsrchr(str, ch)	                Retorna um ponteiro para a Ãºltima ocorrÃªncia de ch
fgets(* str, tam, entrada)          fgetws(* str, tam, entrada)         Entrada de string
tolower(ch)                         towlower(wchar_t ch)	            Converte um caractere wide para minÃºsculo
toupper(ch)                         towupper(wchar_t ch)	            Converte um caractere wide para maiÃºsculo
isalpha(ch)                         iswalpha(ch)	                    Verifica se Ã© um caractere alfabÃ©tico
isdigit(ch)                         iswdigit(ch)	                    Verifica se Ã© um dÃ­gito (0-9)
isspace(ch)                         iswspace(ch)	                    Verifica se Ã© um espaÃ§o em branco
ispunct(ch)                         iswpunct(ch)	                    Verifica se Ã© um caractere de pontuaÃ§Ã£o
putc(caractere, stdout)             putwc(caractere, stdout)            Imprimi apenas um caractere
strtok(* str, * delim)              wcstok(* str, * delim)              Dividi uma string em substrings
fscanf(FILE * ptr, "%s", str)       fwscanf(FILE * ptr, L"%ls", str)    LÃª as informaÃ§Ãµes de um arquivo externo
fprintf(FILE * ptr, "%d", int)      fprintf(FILE * ptr, L"%d", int)     Imprime as informaÃ§Ãµes no arquivo externo
fopen("arquivo.txt", "r")           _wfopen(L"arquivo.txt", L"r")       Retorna o endereÃ§amento do arquivo externo para o ponteiro
fclose(FILE * ptr)                  fclose(FILE * ptr)                  'Fecha' o arquivo o arquivo externo


Biblioteca (char)                   Equivalente (wcahr_t)

#include <string.h>                 #include <wchar.h>
#include <ctype.h>                  #include <wctype.h>

EXPLICAÃ‡ÃƒO

Tabela ASCII
ğŸ”¹ Significado: American Standard Code for Information Interchange (CÃ³digo PadrÃ£o Americano para o IntercÃ¢mbio de InformaÃ§Ãµes).
ğŸ”¹ Tamanho: 7 bits (padrÃ£o original), podendo expandir para 8 bits (ASCII estendido).
ğŸ”¹ Total de Caracteres: 128 no ASCII original, 256 no ASCII estendido.
ğŸ”¹ AbrangÃªncia: Caracteres bÃ¡sicos do inglÃªs (letras, nÃºmeros, sÃ­mbolos e caracteres de controle).
ğŸ”¹ LimitaÃ§Ã£o: NÃ£o inclui caracteres acentuados nem sÃ­mbolos de outros idiomas.

ASCII Estendido
Usa 8 bits e inclui caracteres como Ã§, Ã¡, Ã©, Ã±, Ã¼, mas nÃ£o Ã© padronizadoâ€”hÃ¡ variaÃ§Ãµes conforme o sistema operacional.

Tabela Unicode
ğŸ”¹ Significado: Um padrÃ£o universal para representar caracteres de praticamente todos os idiomas.
ğŸ”¹ Tamanho: Pode ter 8, 16 ou 32 bits (UTF-8, UTF-16, UTF-32).
ğŸ”¹ Total de Caracteres: Mais de 1.1 milhÃ£o de cÃ³digos, cobrindo mais de 150 idiomas.
ğŸ”¹ AbrangÃªncia: Inclui caracteres acentuados, alfabetos asiÃ¡ticos, emojis e sÃ­mbolos especiais.
ğŸ”¹ Vantagem: Permite representaÃ§Ã£o padronizada de caracteres em diferentes plataformas.